from pydantic import BaseModel, Field, field_validator
from typing import List, Optional, Dict,Union
from pathlib import Path

class Justification(BaseModel):
    """A model to hold a single reason for the decision, tied to a specific clause."""
    clause: str = Field(description="The specific clause or rule from the document that this reason is based on.")
    reason: str = Field(description="A simple, one-sentence explanation of how this clause applies to the user's query.")

class PolicyDecision(BaseModel):
    """The final, structured decision for an insurance claim."""
    decision: str = Field(
        description="The final decision: Approved, Rejected, or Pending.",
        enum=["Approved", "Rejected", "Pending"])
    approved_amount: Union[int, str] = Field(description="The final approved payout amount in USD. Should be 'NA' if the claim is not approved or if no specific amount is mentioned.")
    justification: List[Justification] = Field(description="A list of all clauses and reasons that support the final decision.")

class state(BaseModel):
    input: Optional[str] = Field(default=None, description="The text input of the user.")
    file_path: Optional[Path] = Field(default=None, description="Path of the PDF/TXT documents uploaded by the user.")
    rag_ans: Optional[str] = Field(default=None, description="Answer generated by the RAG agent.")
    source: Optional[List[str]] = Field(default=None, description="Valid sources of the answer generated.")
    url: Optional[Path]=Field(default=None,description="url of the data-base stored on cloudinary")
    
    @field_validator("file_path", mode="before")
    @classmethod
    def normalize_path(cls, v):
        if isinstance(v, str):
            return Path(v.replace("\\", "/"))
        return v
