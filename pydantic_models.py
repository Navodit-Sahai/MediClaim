from pydantic import BaseModel, Field, field_validator
from typing import List, Optional, Union
from pathlib import Path

class Justification(BaseModel):
    clause: str = Field(description="The specific clause or rule from the document that this reason is based on.")
    reason: str = Field(description="A simple, one-sentence explanation of how this clause applies to the user's query.")

class query(BaseModel):
    age: Optional[int] = Field(None, description="Age of the person making the claim.")
    procedure: Optional[str] = Field(None, description="Medical procedure or query related to the claim.")
    Location: Optional[str] = Field(None, description="Location of the claimant.")
    duration: Optional[str] = Field(None, description="Duration or validity period of the insurance policy.")

class PolicyDecision(BaseModel):
    decision: str = Field(description="The final decision: Approved, Rejected, or Pending.", enum=["Approved", "Rejected", "Pending"])
    approved_amount: Union[int, str] = Field(description="The final approved payout amount in USD. Should be 'NA' if the claim is not approved or if no specific amount is mentioned.")
    justification: List[Justification] = Field(description="A list of all clauses and reasons that support the final decision.")

class state(BaseModel):
    input: Optional[List[str]] = Field(default=None, description="List of user's text input queries.")
    file_path: Optional[Path] = Field(default=None, description="Path to the uploaded PDF or TXT document.")
    rag_ans: Optional[List[str]] = Field(default=None, description="List of responses generated by RAG agent for each question.")
    source: Optional[List[str]] = Field(default=None, description="Sources used to generate the RAG response.")
    url: Optional[Path] = Field(default=None, description="Cloudinary URL of the stored database or index file.")
    questions: Optional[List[query]] = Field(default=None, description="List of structured and formatted queries.")

    @field_validator("file_path", mode="before")
    @classmethod
    def normalize_path(cls, v):
        if isinstance(v, str):
            return Path(v.replace("\\", "/"))
        return v
