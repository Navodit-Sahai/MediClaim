from pydantic import BaseModel, Field, field_validator
from typing import List, Optional, Dict
from pathlib import Path

class query(BaseModel):
    name: Optional[str] = Field(default=None, description="Name of the policy holder")
    age: Optional[int] = Field(default=None, description="Age of the policy holder")
    procedure: Optional[str] = Field(default=None, description="Procedure to be covered in the policy or query of the user.")
    duration: Optional[str] = Field(default=None, description="Duration of the policy")

class state(BaseModel):
    input: Optional[str] = Field(default=None, description="The text input of the user.")
    question: Optional[query] = Field(default=None, description="Parsed input of the question asked by the user.")
    file_path: Optional[Path] = Field(default=None, description="Path of the PDF/TXT documents uploaded by the user.")
    rag_ans: Optional[str] = Field(default=None, description="Answer generated by the RAG agent.")
    ref_ans: Optional[str] = Field(default=None, description="Answer of the reflector agent.")
    source: Optional[List[str]] = Field(default=None, description="Valid sources of the answer generated.")
    
    @field_validator("file_path", mode="before")
    @classmethod
    def normalize_path(cls, v):
        if isinstance(v, str):
            return Path(v.replace("\\", "/"))
        return v
